// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  password       String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  is_admin       Boolean   @default(false)
  is_super_admin Boolean   @default(false)
  is_verified    Boolean   @default(false)
  otp            String?
  otp_expiry     DateTime?
  reset_token    String?

  skills                 Skill[]
  refreshTokens          RefreshToken[]
  sentMessages           Message[]      @relation("sent_messages")
  receivedMessages       Message[]      @relation("received_messages")
  sent_swap_requests     SwapRequest[]  @relation("sent_swap_requests")
  received_swap_requests SwapRequest[]  @relation("received_swap_requests")
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  sender_id   String
  receiver_id String
  timestamp   DateTime @default(now())
  read        Boolean  @default(false)
  sender      User     @relation("sent_messages", fields: [sender_id], references: [id])
  receiver    User     @relation("received_messages", fields: [receiver_id], references: [id])

  @@index([sender_id, receiver_id])
  @@index([timestamp])
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  user_id   String   @db.ObjectId
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Level {
  beginner
  intermediate
  professional
  expert
}

model Skill {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  level       Level
  achievement String?

  user_id String @db.ObjectId
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  category_id String        @db.ObjectId
  category    SkillCategory @relation(fields: [category_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  offered_swap_requests   SwapRequest[] @relation("offered_skills")
  requested_swap_requests SwapRequest[] @relation("requested_skills")
}

model SkillCategory {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String  @unique
  skills Skill[]
}

model SwapRequest {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  sender_id          String        @db.ObjectId
  receiver_id        String        @db.ObjectId
  offered_skill_id   String        @db.ObjectId
  requested_skill_id String        @db.ObjectId
  status             RequestStatus @default(pending)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt

  sender          User  @relation("sent_swap_requests", fields: [sender_id], references: [id])
  receiver        User  @relation("received_swap_requests", fields: [receiver_id], references: [id])
  offered_skill   Skill @relation("offered_skills", fields: [offered_skill_id], references: [id])
  requested_skill Skill @relation("requested_skills", fields: [requested_skill_id], references: [id])

  @@unique([sender_id, receiver_id, offered_skill_id, requested_skill_id])
}

enum RequestStatus {
  pending
  accepted
  rejected
  cancelled
}
