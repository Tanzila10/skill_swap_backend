// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  password       String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  is_admin       Boolean   @default(false)
  is_super_admin Boolean   @default(false)
  is_verified    Boolean   @default(false)
  otp            String?
  otp_expiry     DateTime?
  reset_token    String?

  skills           Skill[]
  refreshTokens    RefreshToken[]
  sentMessages     Message[]      @relation("sent_messages")
  receivedMessages Message[]      @relation("received_messages")

  sent_swap_requests     SwapRequest[] @relation("SentSwapRequests")
  received_swap_requests SwapRequest[] @relation("ReceivedSwapRequests")

  // Active swap relations
  active_swaps_as_user1 ActiveSwap[] @relation("ActiveSwapsAsUser1")
  active_swaps_as_user2 ActiveSwap[] @relation("ActiveSwapsAsUser2")

  // Completion relations
  swap_completions SwapCompletion[]
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  sender_id   String
  receiver_id String
  timestamp   DateTime @default(now())
  read        Boolean  @default(false)
  sender      User     @relation("sent_messages", fields: [sender_id], references: [id])
  receiver    User     @relation("received_messages", fields: [receiver_id], references: [id])

  @@index([sender_id, receiver_id])
  @@index([timestamp])
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  user_id   String   @db.ObjectId
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Level {
  beginner
  intermediate
  professional
  expert
}

model Skill {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  level       Level
  achievement String?

  user_id String? @db.ObjectId // Make this optional
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade) // Make relation optional

  category_id String        @db.ObjectId
  category    SkillCategory @relation(fields: [category_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  offered_in_requests   SwapRequest[] @relation("OfferedSkills")
  requested_in_requests SwapRequest[] @relation("RequestedSkills")

  // Active swap relations
  active_swaps_skill1 ActiveSwap[] @relation("ActiveSwapsSkill1")
  active_swaps_skill2 ActiveSwap[] @relation("ActiveSwapsSkill2")
}

model SkillCategory {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String  @unique
  skills Skill[]
}

model SwapRequest {
  id                 String     @id @default(cuid()) @map("_id")
  sender_id          String
  receiver_id        String
  offered_skill_id   String
  requested_skill_id String
  message            String?
  status             SwapStatus @default(PENDING)
  rejection_reason   String?
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt

  // Relations
  sender          User  @relation("SentSwapRequests", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver        User  @relation("ReceivedSwapRequests", fields: [receiver_id], references: [id], onDelete: Cascade)
  offered_skill   Skill @relation("OfferedSkills", fields: [offered_skill_id], references: [id], onDelete: Cascade)
  requested_skill Skill @relation("RequestedSkills", fields: [requested_skill_id], references: [id], onDelete: Cascade)

  active_swap ActiveSwap?

  @@index([sender_id])
  @@index([receiver_id])
  @@index([status])
  @@map("swap_requests")
}

model ActiveSwap {
  id              String           @id @default(cuid()) @map("_id")
  swap_request_id String           @unique
  user1_id        String
  user2_id        String
  skill1_id       String
  skill2_id       String
  status          ActiveSwapStatus @default(active)
  created_at      DateTime         @default(now())
  completed_at    DateTime?

  // Relations
  swap_request SwapRequest @relation(fields: [swap_request_id], references: [id], onDelete: Cascade)
  user1        User        @relation("ActiveSwapsAsUser1", fields: [user1_id], references: [id], onDelete: Cascade)
  user2        User        @relation("ActiveSwapsAsUser2", fields: [user2_id], references: [id], onDelete: Cascade)
  skill1       Skill       @relation("ActiveSwapsSkill1", fields: [skill1_id], references: [id], onDelete: Cascade)
  skill2       Skill       @relation("ActiveSwapsSkill2", fields: [skill2_id], references: [id], onDelete: Cascade)

  completions SwapCompletion[]

  @@index([user1_id])
  @@index([user2_id])
  @@index([status])
  @@map("active_swaps")
}

model SwapCompletion {
  id             String   @id @default(cuid()) @map("_id")
  active_swap_id String
  completed_by   String
  rating         Int?
  feedback       String?
  created_at     DateTime @default(now())

  // Relations
  active_swap ActiveSwap @relation(fields: [active_swap_id], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [completed_by], references: [id], onDelete: Cascade)

  @@unique([active_swap_id, completed_by])
  @@map("swap_completions")
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED

  @@map("swap_status")
}

enum ActiveSwapStatus {
  active
  completed
  cancelled

  @@map("active_swap_status")
}
